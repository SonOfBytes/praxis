package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import models "github.com/convox/praxis/provider/models"
import provider "github.com/convox/praxis/provider"

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// BlobStore provides a mock function with given fields: key, r, opts
func (_m *Provider) BlobStore(key string, r io.Reader, opts models.BlobStoreOptions) (string, error) {
	ret := _m.Called(key, r, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, io.Reader, models.BlobStoreOptions) string); ok {
		r0 = rf(key, r, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, models.BlobStoreOptions) error); ok {
		r1 = rf(key, r, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildCreate provides a mock function with given fields: url, opts
func (_m *Provider) BuildCreate(url string, opts models.BuildCreateOptions) (*models.Build, error) {
	ret := _m.Called(url, opts)

	var r0 *models.Build
	if rf, ok := ret.Get(0).(func(string, models.BuildCreateOptions) *models.Build); ok {
		r0 = rf(url, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.BuildCreateOptions) error); ok {
		r1 = rf(url, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRun provides a mock function with given fields: service, opts
func (_m *Provider) ProcessRun(service string, opts models.ProcessRunOptions) (*models.Process, error) {
	ret := _m.Called(service, opts)

	var r0 *models.Process
	if rf, ok := ret.Get(0).(func(string, models.ProcessRunOptions) *models.Process); ok {
		r0 = rf(service, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Process)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.ProcessRunOptions) error); ok {
		r1 = rf(service, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ provider.Provider = (*Provider)(nil)
